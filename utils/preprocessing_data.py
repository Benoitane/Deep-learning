# -*- coding: utf-8 -*-
"""preprocessing_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WudZdSkOv8cQkJoyx3-VBguT-iKdErhf
"""

import neural_tangents as nt
from neural_tangents import stax
import numpy as np
import jax
from jax import random
from neural_tangents import stax
from scipy.signal import gaussian, decimate
from scipy.sparse import csr_matrix
from sklearn.preprocessing import StandardScaler, label_binarize
from sklearn.model_selection import train_test_split
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.preprocessing import LabelEncoder
from keras.utils import to_categorical
from sklearn.model_selection import StratifiedShuffleSplit
from keras.preprocessing.sequence import pad_sequences

def split_dataset(data,labels,data_test,labels_test,val_prop, Deep, modele):
    """

    """
    labels = np.array(labels,dtype=int)
    data = np.array(data)
    ytest = np.array(labels_test,dtype=int)
    xtest = np.array(data_test)
    val_proportion = val_prop

    sss = StratifiedShuffleSplit(n_splits=1, test_size=val_proportion, random_state=0)

    for train_index,val_index  in sss.split(data,labels):
        xtrain,xval = data[train_index],data[val_index]
        ytrain,yval = labels[train_index],labels[val_index]

    if Deep == True:
        ytrain = to_categorical(ytrain, 5)
        yval = to_categorical(yval, 5)
        ytest = to_categorical(ytest, 5)
        if modele == 'CNN':
            xtrain = xtrain.reshape(xtrain.shape[0],xtrain.shape[1],1)
            xval = xval.reshape(xval.shape[0],xval.shape[1],1)
            xtest = xtest.reshape(xtest.shape[0],xtest.shape[1],1)
        if modele == 'RNN':
            xtrain = pad_sequences(xtrain, maxlen=200)
            xval = pad_sequences(xval, maxlen=200)
            xtest = pad_sequences(xtest, maxlen=200)
        if modele == 'NTK':
            nb_train = 10000
            nb_test = 9000
            xtrain = jax.numpy.array(xtrain[:nb_train,:])
            xval = jax.numpy.array(xval[:nb_test,:])
            xtest = jax.numpy.array(xtest[:nb_test,:])
            ytrain = jax.numpy.array(ytrain[:nb_train,:].astype(int))
            yval = jax.numpy.array(yval[:nb_test,:].astype(int))
            ytest = jax.numpy.array(ytest[:nb_test,:].astype(int))
			
    return xtrain,ytrain,xval,yval,xtest,ytest
  
def read_dataset(path):
    data = pd.read_csv(path,header=None)
    labels = data[187].astype(int)
    data.drop(187,axis=1,inplace=True)
    data = data.values
    labels = labels.values
    return data,labels